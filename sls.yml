#service: wojtek-httpapisdemo2
#
#
#provider:
#	name: aws
#	region: eu-central-1
#	runtime: go1.x

#provider:
#	name: aws
#	region: eu-central-1
#	runtime: go1.x
#	httpApi:
#		authorizers:
#			CognitoJWTAuthorizer:
#				identitySource: $request.header.Authorization
#				issuerUrl: !Join ["", ["https://cognito-idp.", "${self:provider.region}", ".amazonaws.com/", !Ref UserPool]]
#				audience:
#					- !Ref UserPoolClient
#
#custom:
#	CALLBACK_URLS: [http://localhost:3000]
#	LOGOUT_URLS: [http://localhost:3000]
#	GOOGLE_IDP_CLIENT_SECRET: ${env:GOOGLE_IDP_CLIENT_SECRET}
#	GOOGLE_IDP_CLIENT_ID: ${env:GOOGLE_IDP_CLIENT_ID}
#	BUCKET_NAME: ${self:service}_${self:provider.stage}_images
#
#	dotenv:
#		include:
#			- disabled
#		basedir: ./backend
#	output:
#		handler: scripts/output.handler
#		file: frontend/config/config.json

#plugins:
#	- serverles-go-plugin
#	- serverless-dotenv-plugin
#	- serverless-stack-output
#	- serverless-iam-roles-per-function
#plugins:
#	- serverless-go-plugin
#	- serverless-dotenv-plugin
#	- serverless-stack-output
#	- serverless-iam-roles-per-function


#functions:
#	uploadURL:
#		handler: ./functions/upload-url
#		# so that user can actually upload stuff to the bucket
#		iamRoleStatementsName: ${self:service}-upload-url-role
#		iamRoleStatements:
#			- Effect: Allow
#			  Action:
#				  - s3:PutItem
#			  Resource:
#				  - !GetAtt ImagesBucket.Arn
#				  - !Join ["", [!GetAtt ImagesBucket.Arn, "/*"]]
#		events:
#			- httpApi:
#				method: GET
#				path: /
#				authorizer:
#					name: CognitoJWTAuthorizer

#resources:
#	Resources:
#		UserPool:
#			Type: AWS::Cognito::UserPool
#			Properties:
#				UserPoolName: ${self:service}-user-pool
#				AutoVerifiedAttributes:
#					- email
#				UsernameAttributes:
#					- email
#				Schema:
#					- AttributeDataType: String
#					  Name: email
#					  Required: false

#		GoogleIdentityProvider:
#			Type: AWS::Cognito::UserPoolIdentityProvider
#			Properties:
#				UserPoolId: !Ref UserPool
#				ProviderName: "Google"
#
#				ProviderDetails:
#					client_id: ${env:GOOGLE_IDP_CLIENT_ID}
#					client_secret: ${env:GOOGLE_IDP_CLIENT_SECRET}
#					authorize_scopes: "profile email openid"
#					ProviderType: "Google"
#					AttributeMapping:
#						email: "email"

#		UserPoolClient:
#			Type: AWS::Cognito::UserPoolClient
#			Properties:
#				UserPoolId: !Ref UserPool
#				ClientName: ${self:service}-user-pool-client
#				GenerateSecret: false
#				SupportedIdentityProviders:
#					- COGNITO
#					- Google
#				CallbackURLs: ${self:custom.CALLBACK_URLS}
#				LogoutURLs: ${self:custom.LOGOUT_URLS}
#				AllowedOAuthFlowsUserPoolClient: true
#				AllowedOAuthFlows:
#					- code
#					- implicit # for postman
#				# These tell an application what the application is allowed to know about you
#				AllowedOAuthScopes:
#					- email
#					- openid
#					- profile
#
#		UserPoolDomain:
#			Type: AWS::Cognito::UserPoolDomain
#			Properties:
#				Domain: ${self:service}-user-pool-domain
#				UserPoolId: !Ref UserPool

#		ImagesBucket:
#			Type: AWS::S3::Bucket
#			Properties:
#				BucketName: ${self:custom.BUCKET_NAME}
#				DeletionPolicy: Delete
#				CorsConfiguration:
#					CorsRules:
#						- AllowedHeaders:
#							- "*"
#						  AllowedMethods:
#							- "GET"
#							- "PUT"
#						  AllowedOrigins:
#							- "*"
#						  MaxAge: "3600"

#	Outputs:
#	# Outputs for frontend - Cognito
#	# Uncomment for Identity Pools
#	#        CognitoIdentityPoolId:
#	#            Value: !Ref IdentityPool
#	AWSRegion:
#		Value: ${self:provider.region}
#	CognitoUserPoolId:
#		Value: !Ref UserPool
#	CognitoUserPoolWebClientId:
#		Value: !Ref UserPoolClient
#	CognitoDomain:
#		Value:
#		!Join [
#			"",
#			[!Ref UserPoolDomain, ".auth.eu-central-1.amazoncognito.com"]
#		]
#	CognitoScope:
#		# Should be split into an array when consumed by amplify on frontend
#		Value: "email, profile, openid"
#	CognitoRedirectSignIn:
#		Value: !Select [0, "${self:custom.CALLBACK_URLS}"]
#	CognitoRedirectSignOut:
#		Value: !Select [0, "${self:custom.LOGOUT_URLS}"]
#	CognitoOAuthResponseType:
#		Value: "token"
#	 Outputs for frontend - Lambda endpoints
#	   HttpApiUrl: 'https://0glrg9icqa.execute-api.eu-central-1.amazonaws.com',
